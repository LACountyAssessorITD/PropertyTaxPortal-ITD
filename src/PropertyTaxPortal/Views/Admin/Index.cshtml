
@{
    ViewData["Title"] = "Property Tax Portal Site Administration";
}



<section class="section-admin-header d-flex justify-content-between mx-5 my-3">
    <div>
        <h4>Welcome @User.Identity.Name,</h4>
    </div>
    <div>
        <form method="post" asp-controller="Auth" asp-action="SignOut">
            <button type="submit" class="btn btn-admin">Sign Out</button>
        </form>
    </div>
</section>




<div id="embed-api-auth-container"></div>
<div id="view-selector-container"></div>



<section class="container-fluid section-analytics my-5">
    <div class="row">
        <div class="col-md-4 bg-grey analyitics-img">
            <div id="main-chart-container"></div>
        </div>
        <div class="col-md-4 bg-grey analyitics-img">
            <div id="breakdown-chart-container"></div>
        </div>
        <div class="col-md-4 bg-grey analyitics-img">
            <div id="main-second-container"></div>
        </div>
    </div>
    
</section>


<section class="container-fluid section-analytics section-cards">
    <div class="row">

        <div class="col-md-4  text-card  js--wp-4">
            <a asp-controller="Categories" asp-action="Index">
                <div class="card-img bg-grey">
                    <ion class="fas fa-align-justify c-1"></ion>

                </div>
                <p>Categories</p>

            </a>
        </div>
        <div class="col-md-4  text-card  js--wp-5">
            <a asp-controller="FAQs" asp-action="Index">
                <div class="card-img bg-grey">
                    @*<ion-icon class="c-2" name="people"></ion-icon>*@
                    <ion class="fas fa-question-circle c-2"></ion>
                </div>
                <p>FAQ</p>

            </a>
        </div>
        <div class="col-md-4  text-card  js--wp-6">
            <a asp-controller="News" asp-action="Index">
                <div class="card-img bg-grey">
                    @*<ion-icon class="c-3" name="people"></ion-icon>*@
                    <ion class="fas fa-newspaper c-3"></ion>
                </div>
                <p>NEWS</p>

            </a>
        </div>
    </div>
</section>



<style>
    body {
        background-color: #f1f4f7;
    }
</style>
<script>

    gapi.analytics.ready(function () {

        /**
         * Authorize the user immediately if the user has already granted access.
         * If no access has been created, render an authorize button inside the
         * element with the ID "embed-api-auth-container".
         */
        gapi.analytics.auth.authorize({
            container: 'embed-api-auth-container',
            clientid: '982875457810-v4f1vudfbnm9hk0in3kv0g4s1jggvb24.apps.googleusercontent.com'
        });


        /**
         * Create a new ViewSelector instance to be rendered inside of an
         * element with the id "view-selector-container".
         */
        var viewSelector = new gapi.analytics.ViewSelector({
            container: 'view-selector-container'
        });

        // Render the view selector to the page.
        viewSelector.execute();

        /**
         * Create a table chart showing top browsers for users to interact with.
         * Clicking on a row in the table will update a second timeline chart with
         * data from the selected browser.
         */
        var mainChart = new gapi.analytics.googleCharts.DataChart({
            query: {
                'ids': 'ga:190022142',
                'dimensions': 'ga:pagePath',
                'metrics': 'ga:users',
                'start-date': '30daysAgo',
                'end-date': 'yesterday',
                'sort': '-ga:users',
                'max-results': '5'
            },
            chart: {
                type: 'PIE',
                container: 'main-chart-container',
                options: {
                    title: 'Top Pageviews',
                    width: '100%'
                }
            }
            
        });
        var mainSecondChart = new gapi.analytics.googleCharts.DataChart({
            query: {
                'ids': 'ga:190022142',
                'dimensions': 'ga:browser',
                'metrics': 'ga:users',
                'start-date': '30daysAgo',
                'end-date': 'yesterday',
                'sort': '-ga:users',
                'max-results': '5'
            },
            chart: {
                type: 'BAR',
                container: 'main-second-container',
                options: {
                    title: 'Top Browser',
                    width: '100%',
                    
                }
            }

        });


        /**
         * Create a timeline chart showing sessions over time for the browser the
         * user selected in the main chart.
         */
        var breakdownChart = new gapi.analytics.googleCharts.DataChart({
            query: {
                'dimensions': 'ga:date',
                'metrics': 'ga:users',
                'start-date': '30daysAgo',
                'end-date': 'yesterday'
            },
            chart: {
                type: 'LINE',
                container: 'breakdown-chart-container',
                options: {
                    width: '100%'
                }
            }
        });


        /**
         * Store a refernce to the row click listener variable so it can be
         * removed later to prevent leaking memory when the chart instance is
         * replaced.
         */
        var mainChartRowClickListener;


        /**
         * Update both charts whenever the selected view changes.
         */
        viewSelector.on('change', function (ids) {
            var options = { query: { ids: 'ga:190022142' } };

            // Clean up any event listeners registered on the main chart before
            // rendering a new one.
            if (mainChartRowClickListener) {
                google.visualization.events.removeListener(mainChartRowClickListener);
            }

            mainChart.set(options).execute();
            mainSecondChart.set(options).execute();
            breakdownChart.set(options);

            // Only render the breakdown chart if a browser filter has been set.
            if (breakdownChart.get().query.filters) breakdownChart.execute();
        });


        /**
         * Each time the main chart is rendered, add an event listener to it so
         * that when the user clicks on a row, the line chart is updated with
         * the data from the browser in the clicked row.
         */
        mainChart.on('success', function (response) {

            var chart = response.chart;
            var dataTable = response.dataTable;

            // Store a reference to this listener so it can be cleaned up later.
            mainChartRowClickListener = google.visualization.events
                .addListener(chart, 'select', function (event) {

                    // When you unselect a row, the "select" event still fires
                    // but the selection is empty. Ignore that case.
                    if (!chart.getSelection().length) return;

                    var row = chart.getSelection()[0].row;
                    var browser = dataTable.getValue(row, 0);
                    var options = {
                        query: {
                            filters: 'ga:pagePath==' + browser
                        },
                        chart: {
                            options: {
                                title: browser
                            }
                        }
                    };

                    breakdownChart.set(options).execute();
                });
        });

    });
</script>
